import kitten.xs_Rounding;
import rangedint;
import helperfunctions;


struct RangedFloat {
    var min: Float;
    var max: Float;
    var val: Float;
    var clampmode: ClampMode = ClampMode.CLIP;

    public static function new(min: Float, max: Float, val: Float, clampmode: ClampMode = ClampMode.CLIP): RangedFloat {
        var clamped: Float = xs_ClampFloat(val, min, max);
        if clampmode == ClampMode.CLIP {
            clamped = xs_ClampFloat(val, min, max);
        } else if clampmode == ClampMode.WRAP {
            clamped = eucModFloat(val - min, max - min) + min;
        } else {
            fprintf(stderr, "Invalid clampmode\n");
            clamped = val;
        }
        return struct Self {
            min,
            max,
            val: clamped,
            clampmode
        };
    }

    function clamp(val: Float): Float {
        if this.clampmode == ClampMode.CLIP {
            return xs_ClampFloat(val, this.min, this.max);
        } else if this.clampmode == ClampMode.WRAP {
            return eucModFloat(val - this.min, this.max - this.min) + this.min;
        } else {
            fprintf(stderr, "Invalid clampmode\n");
            return val;
        }
    }

    function set(val: Float): Void {
        this.val = this.clamp(val);
    }

    function get(): Float {
        return this.clamp(this.val);
    }

    rules {
        (${one: RangedFloat} -  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val   -          $two.val);
        (${one: RangedFloat} +  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val   +          $two.val);
        (${one: RangedFloat} *  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val   *          $two.val);
        (${one: RangedFloat} /  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val   /          $two.val);
        (${one: RangedFloat} %  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val   %          $two.val);
        (${one: RangedFloat} %+ ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, eucModFloat($one.val, $two.val));
        (${one: RangedFloat} ** ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, pow($one.val,         $two.val));

        (${one: RangedFloat} -  ${two: Int})           => RangedFloat.new($one.min, $one.max, $one.val   -          $two);
        (${one: RangedFloat} +  ${two: Int})           => RangedFloat.new($one.min, $one.max, $one.val   +          $two);
        (${one: RangedFloat} *  ${two: Int})           => RangedFloat.new($one.min, $one.max, $one.val   *          $two);
        (${one: RangedFloat} /  ${two: Int})           => RangedFloat.new($one.min, $one.max, $one.val   /          $two);
        (${one: RangedFloat} %  ${two: Int})           => RangedFloat.new($one.min, $one.max, $one.val   %          $two);
        (${one: RangedFloat} %+ ${two: Int})           => RangedFloat.new($one.min, $one.max, eucModFloat($one.val, $two));
        (${one: RangedFloat} ** ${two: Int})           => RangedFloat.new($one.min, $one.max, pow($one.val,         $two));

        (${one: Int}         -  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one       -          $two.val);
        (${one: Int}         +  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one       +          $two.val);
        (${one: Int}         *  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one       *          $two.val);
        (${one: Int}         /  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one       /          $two.val);
        (${one: Int}         %  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one       %          $two.val);
        (${one: Int}         %+ ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, eucModFloat($one,     $two.val));
        (${one: Int}         ** ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, pow($one,             $two.val));

        (${one: RangedFloat} -  ${two: Float})         => RangedFloat.new($one.min, $one.max, $one.val -            $two);
        (${one: RangedFloat} +  ${two: Float})         => RangedFloat.new($one.min, $one.max, $one.val +            $two);
        (${one: RangedFloat} *  ${two: Float})         => RangedFloat.new($one.min, $one.max, $one.val *            $two);
        (${one: RangedFloat} /  ${two: Float})         => RangedFloat.new($one.min, $one.max, $one.val /            $two);
        (${one: RangedFloat} %  ${two: Float})         => RangedFloat.new($one.min, $one.max, $one.val %            $two);
        (${one: RangedFloat} %+ ${two: Float})         => RangedFloat.new($one.min, $one.max, eucModFloat($one.val, $two));
        (${one: RangedFloat} ** ${two: Float})         => RangedFloat.new($one.min, $one.max, pow($one.val,         $two));

        (${one: Float}       -  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one     -            $two.val);
        (${one: Float}       +  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one     +            $two.val);
        (${one: Float}       *  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one     *            $two.val);
        (${one: Float}       /  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one     /            $two.val);
        (${one: Float}       %  ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, $one     %            $two.val);
        (${one: Float}       %+ ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, eucModFloat($one,     $two.val));
        (${one: Float}       ** ${two: RangedFloat})   => RangedFloat.new($two.min, $two.max, pow($one,             $two.val));

        (${one: RangedInt}   -  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val -            $two.val);
        (${one: RangedInt}   +  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val +            $two.val);
        (${one: RangedInt}   *  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val *            $two.val);
        (${one: RangedInt}   /  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val /            $two.val);
        (${one: RangedInt}   %  ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, $one.val %            $two.val);
        (${one: RangedInt}   %+ ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, eucModFloat($one.val, $two.val));
        (${one: RangedInt}   ** ${two: RangedFloat})   => RangedFloat.new($one.min, $one.max, pow($one.val,         $two.val));

        (${one: RangedFloat} -  ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, $one.val -            $two.val);
        (${one: RangedFloat} +  ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, $one.val +            $two.val);
        (${one: RangedFloat} *  ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, $one.val *            $two.val);
        (${one: RangedFloat} /  ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, $one.val /            $two.val);
        (${one: RangedFloat} %  ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, $one.val %            $two.val);
        (${one: RangedFloat} %+ ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, eucModFloat($one.val, $two.val));
        (${one: RangedFloat} ** ${two: RangedInt})     => RangedFloat.new($one.min, $one.max, pow($one.val,         $two.val));


        (${one: RangedFloat} -=  ${two: RangedFloat})  => $one.set($one.val -            $two.val);
        (${one: RangedFloat} +=  ${two: RangedFloat})  => $one.set($one.val +            $two.val);
        (${one: RangedFloat} *=  ${two: RangedFloat})  => $one.set($one.val *            $two.val);
        (${one: RangedFloat} /=  ${two: RangedFloat})  => $one.set($one.val /            $two.val);
        (${one: RangedFloat} %=  ${two: RangedFloat})  => $one.set($one.val %            $two.val);
        (${one: RangedFloat} %+= ${two: RangedFloat})  => $one.set(eucModFloat($one.val, $two.val));
        (${one: RangedFloat} **= ${two: RangedFloat})  => $one.set(pow($one.val,         $two.val));

        (${one: RangedFloat} -=  ${two: Int})          => $one.set($one.val -            $two);
        (${one: RangedFloat} +=  ${two: Int})          => $one.set($one.val +            $two);
        (${one: RangedFloat} *=  ${two: Int})          => $one.set($one.val *            $two);
        (${one: RangedFloat} /=  ${two: Int})          => $one.set($one.val /            $two);
        (${one: RangedFloat} %=  ${two: Int})          => $one.set($one.val %            $two);
        (${one: RangedFloat} %+= ${two: Int})          => $one.set(eucModFloat($one.val, $two));
        (${one: RangedFloat} **= ${two: Int})          => $one.set(pow($one.val,         $two));

        (${one: RangedFloat} -=  ${two: Float})        => $one.set($one.val -            $two);
        (${one: RangedFloat} +=  ${two: Float})        => $one.set($one.val +            $two);
        (${one: RangedFloat} *=  ${two: Float})        => $one.set($one.val *            $two);
        (${one: RangedFloat} /=  ${two: Float})        => $one.set($one.val /            $two);
        (${one: RangedFloat} %=  ${two: Float})        => $one.set($one.val %            $two);
        (${one: RangedFloat} %+= ${two: Float})        => $one.set(eucModFloat($one.val, $two));
        (${one: RangedFloat} **= ${two: Float})        => $one.set(pow($one.val,         $two));

        (${one: RangedFloat} -=  ${two: RangedInt})    => $one.set($one.val -            $two.val);
        (${one: RangedFloat} +=  ${two: RangedInt})    => $one.set($one.val +            $two.val);
        (${one: RangedFloat} *=  ${two: RangedInt})    => $one.set($one.val *            $two.val);
        (${one: RangedFloat} /=  ${two: RangedInt})    => $one.set($one.val /            $two.val);
        (${one: RangedFloat} %=  ${two: RangedInt})    => $one.set($one.val %            $two.val);
        (${one: RangedFloat} %+= ${two: RangedInt})    => $one.set(eucModFloat($one.val, $two.val));
        (${one: RangedFloat} **= ${two: RangedInt})    => $one.set(pow($one.val,         $two.val));


        (${one: RangedFloat} =   ${two: RangedInt})   => $one.set($two.val);
        (${one: RangedFloat} =   ${two: Int})         => $one.set($two);
        (${one: RangedFloat} =   ${two: Float})       => $one.set($two);
        (${one: RangedFloat} =   ${two: RangedFloat}) => $one.set($two.val);


        (${one: RangedFloat} ==  ${two: RangedFloat}) => $one.get() == $two.get();
        (${one: RangedFloat} <=  ${two: RangedFloat}) => $one.get() <= $two.get();
        (${one: RangedFloat} >=  ${two: RangedFloat}) => $one.get() >= $two.get();
        (${one: RangedFloat} !=  ${two: RangedFloat}) => $one.get() != $two.get();
        (${one: RangedFloat} >   ${two: RangedFloat}) => $one.get() >  $two.get();
        (${one: RangedFloat} <   ${two: RangedFloat}) => $one.get() <  $two.get();
        (${one: RangedFloat} ||  ${two: RangedFloat}) => $one.get() || $two.get();
        (${one: RangedFloat} &&  ${two: RangedFloat}) => $one.get() && $two.get();

        (${one: RangedFloat} ==  ${two: Int})         => $one.get() == $two;
        (${one: RangedFloat} <=  ${two: Int})         => $one.get() <= $two;
        (${one: RangedFloat} >=  ${two: Int})         => $one.get() >= $two;
        (${one: RangedFloat} !=  ${two: Int})         => $one.get() != $two;
        (${one: RangedFloat} >   ${two: Int})         => $one.get() >  $two;
        (${one: RangedFloat} <   ${two: Int})         => $one.get() <  $two;
        (${one: RangedFloat} ||  ${two: Int})         => $one.get() || $two;
        (${one: RangedFloat} &&  ${two: Int})         => $one.get() && $two;

        (${one: Int}         ==  ${two: RangedFloat}) => $one       == $two.get();
        (${one: Int}         <=  ${two: RangedFloat}) => $one       <= $two.get();
        (${one: Int}         >=  ${two: RangedFloat}) => $one       >= $two.get();
        (${one: Int}         !=  ${two: RangedFloat}) => $one       != $two.get();
        (${one: Int}         >   ${two: RangedFloat}) => $one       >  $two.get();
        (${one: Int}         <   ${two: RangedFloat}) => $one       <  $two.get();
        (${one: Int}         ||  ${two: RangedFloat}) => $one       || $two.get();
        (${one: Int}         &&  ${two: RangedFloat}) => $one       && $two.get();

        (${one: RangedFloat} ==  ${two: Float})       => $one.get() == $two;
        (${one: RangedFloat} <=  ${two: Float})       => $one.get() <= $two;
        (${one: RangedFloat} >=  ${two: Float})       => $one.get() >= $two;
        (${one: RangedFloat} !=  ${two: Float})       => $one.get() != $two;
        (${one: RangedFloat} >   ${two: Float})       => $one.get() >  $two;
        (${one: RangedFloat} <   ${two: Float})       => $one.get() <  $two;
        (${one: RangedFloat} ||  ${two: Float})       => $one.get() || $two;
        (${one: RangedFloat} &&  ${two: Float})       => $one.get() && $two;

        (${one: Float}       ==  ${two: RangedFloat}) => $one       == $two.get();
        (${one: Float}       <=  ${two: RangedFloat}) => $one       <= $two.get();
        (${one: Float}       >=  ${two: RangedFloat}) => $one       >= $two.get();
        (${one: Float}       !=  ${two: RangedFloat}) => $one       != $two.get();
        (${one: Float}       >   ${two: RangedFloat}) => $one       >  $two.get();
        (${one: Float}       <   ${two: RangedFloat}) => $one       <  $two.get();
        (${one: Float}       ||  ${two: RangedFloat}) => $one       || $two.get();
        (${one: Float}       &&  ${two: RangedFloat}) => $one       && $two.get();

        (${one: RangedInt}   ==  ${two: RangedFloat}) => $one.get() == $two.get();
        (${one: RangedInt}   <=  ${two: RangedFloat}) => $one.get() <= $two.get();
        (${one: RangedInt}   >=  ${two: RangedFloat}) => $one.get() >= $two.get();
        (${one: RangedInt}   !=  ${two: RangedFloat}) => $one.get() != $two.get();
        (${one: RangedInt}   >   ${two: RangedFloat}) => $one.get() >  $two.get();
        (${one: RangedInt}   <   ${two: RangedFloat}) => $one.get() <  $two.get();
        (${one: RangedInt}   ||  ${two: RangedFloat}) => $one.get() || $two.get();
        (${one: RangedInt}   &&  ${two: RangedFloat}) => $one.get() && $two.get();

        (${one: RangedFloat} ==  ${two: RangedInt})   => $one.get() == $two.get();
        (${one: RangedFloat} <=  ${two: RangedInt})   => $one.get() <= $two.get();
        (${one: RangedFloat} >=  ${two: RangedInt})   => $one.get() >= $two.get();
        (${one: RangedFloat} !=  ${two: RangedInt})   => $one.get() != $two.get();
        (${one: RangedFloat} >   ${two: RangedInt})   => $one.get() >  $two.get();
        (${one: RangedFloat} <   ${two: RangedInt})   => $one.get() <  $two.get();
        (${one: RangedFloat} ||  ${two: RangedInt})   => $one.get() || $two.get();
        (${one: RangedFloat} &&  ${two: RangedInt})   => $one.get() && $two.get();
    }
}


function main() {
    var rf: RangedFloat = RangedFloat.new(-100, 100, 3, CLIP);
    for n in 0 ... 50 {
        printf("cycle %d, value %f, raw value %f", n, rf.get(), rf.val);
        if rf >= 10 && rf <= 20 {
            printf("  --  between 10 and 20");
        }
        printf("\n");
        rf -= n * 2;
        rf *= 1.2;
        rf %+= 25;
    }
}
